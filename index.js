// Generated by CoffeeScript 1.10.0
(function() {
  var bio, body, central, draw, header, main, time;

  body = d3.select('body');

  main = body.append('div').attrs({
    "class": 'main'
  });


  /* Header
   */

  header = main.append('div').attrs({
    "class": 'header'
  });

  header.append('div').attrs({
    "class": 'left'
  });

  bio = header.append('div').attrs({
    "class": 'bio'
  });

  header.append('div').attrs({
    "class": 'right'
  });


  /* Central
   */

  central = main.append('div').attrs({
    "class": 'central'
  });

  time = d3.scaleTime();

  draw = function(data) {

    /* Nodes
     */
    var bar_height, en_periods, label, node_group, nodes, nodes_div, periods, periods_div, points, ranges, svg;
    nodes = central.selectAll('.node').data(data);
    node_group = nodes.enter().append('div').attrs({
      "class": function(d) {
        return 'node';
      }
    });
    label = node_group.append('div').attrs({
      "class": 'label left'
    });
    label.append('div').on('click', function(d) {
      if (d3.select(this.parentNode.parentNode).select('.info').style('opacity') === '0') {
        return d3.select(this.parentNode.parentNode).select('.info').transition().duration(500).styles({
          display: 'inline'
        }).transition().duration(1000).styles({
          opacity: 1
        });
      } else {
        return d3.select(this.parentNode.parentNode).select('.info').transition().duration(1000).styles({
          opacity: 0
        }).transition().duration(500).styles({
          display: 'none'
        });
      }
    }).html(function(d) {
      if (d.name.length > 20) {
        return (d.name.slice(0, 20)) + "... <i class='fa fa-circle " + d.type + "' aria-hidden='true'></i>";
      } else {
        return d.name + " <i class='fa fa-circle " + d.type + "' aria-hidden='true'></i>";
      }
    });

    /* Time ranges
     */
    bar_height = 6;
    nodes_div = node_group.append('div').attrs({
      "class": 'middle'
    });
    svg = nodes_div.append('svg').attrs({
      height: bar_height
    });

    /* Info
     */
    nodes_div.append('div').styles({
      opacity: 0,
      display: 'none'
    }).attrs({
      "class": 'info'
    }).html(function(d) {
      switch (d.type) {
        case 'Education':
          return d.name + " in " + d.title + "<br>@" + d.location;
        case 'Experience':
          return d.name + "<br>@" + d.location + ", " + d.place;
        case 'Project':
          return "" + d.description;
        case 'Publication':
          return d.name + "<br>" + (d.authors.join(', ')) + "<br>@" + d.conference + ", " + d.location;
        default:
          return '';
      }
    });
    time.range([0, d3.select('.middle').node().getBoundingClientRect().width]);
    ranges = svg.selectAll('.range').data(function(d) {
      if (d.timerange != null) {
        return [d];
      } else {
        return [];
      }
    });
    ranges.enter().append('rect').attrs({
      "class": 'range',
      height: bar_height,
      width: function(d) {
        if (d.timerange != null) {
          return time(d.timerange.end === 'Present' ? new Date() : new Date(d.timerange.end)) - time(new Date(d.timerange.start));
        }
      },
      x: function(d) {
        if (d.timerange != null) {
          return time(new Date(d.timerange.start));
        }
      }
    });
    points = svg.selectAll('.point').data(function(d) {
      if (d.date != null) {
        return [d];
      } else {
        return [];
      }
    });
    points.enter().append('circle').attrs({
      r: bar_height / 2,
      cx: function(d) {
        if (d.date != null) {
          return time(new Date(d.date));
        }
      },
      cy: bar_height / 2
    });
    periods_div = node_group.append('div').attrs({
      "class": 'right'
    });
    periods = periods_div.selectAll('.period').data(function(d) {
      return [d];
    });
    return en_periods = periods.enter().append('div').attrs({
      "class": 'period'
    }).html(function(d) {
      if (d.timerange != null) {
        if (d.timerange.end !== 'Present') {
          return "(<span>from</span> " + (d.timerange.start.split(' ')[0].slice(0, 3)) + " " + (d.timerange.start.split(' ')[1]) + " <span>to</span> " + (d.timerange.end.split(' ')[0].slice(0, 3)) + " " + (d.timerange.end.split(' ')[1]) + ")";
        } else {
          return "(<span>from</span> " + (d.timerange.start.split(' ')[0].slice(0, 3)) + " " + (d.timerange.start.split(' ')[1]) + " <span>to</span> " + d.timerange.end + ")";
        }
      } else {
        return "(" + (d.date.split(' ')[0].slice(0, 3)) + " " + (d.date.split(' ')[1]) + ")";
      }
    });
  };


  /* Data loading
   */

  d3.json('data.json', function(error, data) {
    var legend, max, min;
    if (error) {
      console.warn(error);
    }
    bio.text(data.bio);
    max = d3.max(data.nodes.map(function(d) {
      return d3.max(d.timerange != null ? [new Date(d.timerange.start), d.timerange.end === 'Present' ? new Date() : new Date(d.timerange.end)] : new Date(d.date));
    }));
    min = d3.min(data.nodes.map(function(d) {
      return d3.min(d.timerange != null ? [new Date(d.timerange.start), d.timerange.end === 'Present' ? new Date() : new Date(d.timerange.end)] : new Date(d.date));
    }));
    min = new Date(min).setMonth(min.getMonth() - 6);
    max = new Date(max).setMonth(max.getMonth() + 6);
    time.domain([min, max]);
    draw(data.nodes);
    return legend = central.append('div').attrs({
      "class": 'legend'
    }).html("<span><i class='fa fa-circle Education' aria-hidden='true'></i> Education</span> <span><i class='fa fa-circle Experience' aria-hidden='true'></i> Experience</span> <span><i class='fa fa-circle Project' aria-hidden='true'></i> Project</span> <span><i class='fa fa-circle Publication' aria-hidden='true'></i> Publication</span>");
  });

}).call(this);
