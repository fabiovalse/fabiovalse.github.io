// Generated by CoffeeScript 1.10.0
(function() {
  var axis, axis_top, bar_height, draw, grid, height, svg, time, vis, width;

  width = d3.select('body').node().getBoundingClientRect().width;

  height = d3.select('body').node().getBoundingClientRect().height;

  svg = d3.select('svg');

  vis = svg.append('g');

  Array.prototype.unique = function() {
    var j, key, output, ref, results, value;
    output = {};
    for (key = j = 0, ref = this.length; 0 <= ref ? j < ref : j > ref; key = 0 <= ref ? ++j : --j) {
      output[this[key]] = this[key];
    }
    results = [];
    for (key in output) {
      value = output[key];
      results.push(value);
    }
    return results;
  };

  time = d3.scaleTime();

  axis_top = null;

  axis = null;

  grid = null;

  bar_height = 6;

  draw = function(data, sorting) {
    var all_nodes, en_nodes, nodes;
    if (sorting) {
      data = data.sort(function(a, b) {
        if (a.type === 'Publication' && b.type === 'Publication') {
          return time(new Date(a.date)) - time(new Date(b.date));
        } else if (a.type === 'Publication') {
          return time(new Date(a.date)) - time(new Date(b.timerange.start));
        } else if (b.type === 'Publication') {
          return time(new Date(a.timerange.start)) - time(new Date(b.date));
        } else {
          return time(new Date(a.timerange.start)) - time(new Date(b.timerange.start));
        }
      });
    }

    /* Nodes
     */
    nodes = vis.selectAll('.node').data(data, function(d, i) {
      return d.label + "_" + i;
    });
    en_nodes = nodes.enter().append('g').attrs({
      "class": function(d) {
        return 'node';
      }
    });
    all_nodes = en_nodes.merge(nodes).attrs({
      transform: function(d, i) {
        return "translate(" + (width * 0.25) + ", " + ((i + 1) * 20) + ")";
      }
    });
    en_nodes.append('a').attrs({
      href: function(d, i) {
        return "#" + i;
      }
    }).append('text').attrs({
      "class": 'label',
      x: -20,
      'text-anchor': 'end'
    }).html(function(d) {
      if (d.short_label.length > 20) {
        return (d.short_label.slice(0, 20)) + "...";
      } else {
        return "" + d.short_label;
      }
    });
    en_nodes.append('circle').attrs({
      "class": function(d) {
        return d.type;
      },
      cx: -10,
      cy: -4,
      r: 5
    });
    nodes.exit().remove();

    /* Time ranges
     */
    en_nodes.append('rect').attrs({
      "class": 'background',
      width: "" + (width * 0.5),
      height: bar_height,
      y: -7
    });
    return en_nodes.append('rect').attrs({
      "class": 'foreground',
      height: function(d) {
        if (d.type === 'Publication') {
          return bar_height * 2;
        } else {
          return bar_height;
        }
      },
      width: function(d) {
        if (d.type === 'Publication') {
          return 3;
        } else if (d.timerange != null) {
          return time(d.timerange.end === 'Present' ? new Date() : new Date(d.timerange.end)) - time(new Date(d.timerange.start));
        }
      },
      y: function(d) {
        if (d.type === 'Publication') {
          return -10;
        } else {
          return -7;
        }
      },
      x: function(d) {
        if (d.type === 'Publication') {
          return time(new Date(d.date));
        } else if (d.timerange != null) {
          return time(new Date(d.timerange.start));
        }
      }
    }).append('title').html(function(d) {
      if (d.type === 'Publication') {
        return d.date;
      } else if (d.timerange != null) {
        if (d.timerange.end !== 'Present') {
          return "(<span>from</span> " + (d.timerange.start.split(' ')[0].slice(0, 3)) + " " + (d.timerange.start.split(' ')[1]) + " <span>to</span> " + (d.timerange.end.split(' ')[0].slice(0, 3)) + " " + (d.timerange.end.split(' ')[1]) + ")";
        } else {
          return "(<span>from</span> " + (d.timerange.start.split(' ')[0].slice(0, 3)) + " " + (d.timerange.start.split(' ')[1]) + " <span>to</span> " + d.timerange.end + ")";
        }
      } else {
        return "(" + (d.date.split(' ')[0].slice(0, 3)) + " " + (d.date.split(' ')[1]) + ")";
      }
    });
  };


  /* Data loading
   */

  d3.json('data.json', function(error, data) {
    var all_items, en_entries, en_items, entries, info, items, max, min;
    if (error) {
      console.warn(error);
    }
    d3.select('.header .bio').text(data.bio);
    svg.styles({
      height: '380px'
    });
    max = d3.max(data.nodes.map(function(d) {
      return d3.max(d.timerange != null ? [new Date(d.timerange.start), d.timerange.end === 'Present' ? new Date() : new Date(d.timerange.end)] : new Date(d.date));
    }));
    min = d3.min(data.nodes.map(function(d) {
      return d3.min(d.timerange != null ? [new Date(d.timerange.start), d.timerange.end === 'Present' ? new Date() : new Date(d.timerange.end)] : new Date(d.date));
    }));
    min = new Date(min).setMonth(min.getMonth() - 6);
    max = new Date(max).setMonth(max.getMonth() + 6);
    time.domain([min, max]).range([0, width * 0.5]);
    axis_top = d3.axisBottom(time);
    axis = vis.append('g').attrs({
      transform: "translate(" + (width * 0.25) + ", " + (data.nodes.length * (bar_height + 15)) + ")"
    }).call(axis_top);
    grid = axis.append('g').attrs({
      "class": 'grid'
    }).call(axis_top.tickSize(-(data.nodes.length + 1) * 30).tickFormat(''));
    draw(data.nodes);
    entries = d3.select('.legend').selectAll('.entry').data(data.nodes.map(function(d) {
      return d.type;
    }).unique());
    en_entries = entries.enter().append('div').attrs({
      "class": 'entry'
    });
    en_entries.append('div').attrs({
      "class": function(d) {
        return "circle " + d;
      }
    });
    en_entries.append('div').text(function(d) {
      return d;
    });
    info = d3.select('.inner_info');
    items = info.selectAll('.item').data(data.nodes);
    en_items = items.enter().append('div').attrs({
      id: function(d, i) {
        return "" + i;
      },
      "class": 'item'
    });
    all_items = en_items.merge(items);
    en_items.append('div').attrs({
      "class": function(d) {
        return "circle " + d.type;
      }
    });
    en_items.append('div').attrs({
      "class": 'title justified'
    }).text(function(d) {
      return d.label;
    });
    en_items.append('div').attrs({
      "class": 'subtitle'
    }).html(function(d) {
      switch (d.type) {
        case 'Publication':
          return "@ " + d.conference + ", " + d.location + ", " + d.date;
        case 'Education':
          return "@ " + d.location;
        case 'Experience':
          if (d.location != null) {
            return "@ " + d.location + ", " + d.place;
          } else {
            return "";
          }
          break;
        case 'Project':
          return "> " + (d.technologies.join(' - '));
      }
    });
    en_items.append('div').attrs({
      "class": 'description'
    }).html(function(d) {
      switch (d.type) {
        case 'Publication':
          return "" + d.abstract;
        case 'Education':
          return "" + d.description;
        case 'Experience':
          return "" + d.description;
        case 'Project':
          return "" + d.description;
        default:
          return '';
      }
    });
    en_items.append('div').attrs({
      "class": 'imgs'
    }).html(function(d) {
      if (d.imgs) {
        return d.imgs.map(function(img) {
          return "<img src='img/" + img + "'>";
        }).join('');
      } else {
        return "";
      }
    });
    en_items.append('div').attrs({
      "class": 'links'
    }).html(function(d) {
      return (d.presentation !== void 0 ? '<a href="data/' + d.presentation + '">Slides</a>' : '') + "\n" + (d.paper !== void 0 ? '<a href="data/' + d.paper + '">Paper</a>' : '');
    });
    return items.exit().remove();
  });

}).call(this);
